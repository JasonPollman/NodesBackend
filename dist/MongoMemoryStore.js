'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.data = undefined;var _bluebird = require('bluebird');var _bluebird2 = _interopRequireDefault(_bluebird);

























/**
                                                                                                                                                                                             * Sets a new node in memory for quick retrieval and persists it to the database.
                                                                                                                                                                                             * @param {string} id The node's id.
                                                                                                                                                                                             * @param {object} node The node data to set in the store.
                                                                                                                                                                                             * @export
                                                                                                                                                                                             */var set = function () {var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(
  function _callee(collection, id, node) {return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
            log('SET', node);return _context.abrupt('return',

            collection.
            updateAsync({ id: id }, { $set: node }, { upsert: true }).
            then(function () {return data.set(id, node);}));case 2:case 'end':return _context.stop();}}}, _callee, this);}));return function set(_x, _x2, _x3) {return _ref.apply(this, arguments);};}();


/**
                                                                                                                                                                                                           * Fetches a node by id.
                                                                                                                                                                                                           * @param {string} id The id of the node to get.
                                                                                                                                                                                                           * @export
                                                                                                                                                                                                           */var get = function () {var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(
  function _callee2(collection, id) {return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:
            log('GET', id);return _context2.abrupt('return',
            data.get(id));case 2:case 'end':return _context2.stop();}}}, _callee2, this);}));return function get(_x4, _x5) {return _ref2.apply(this, arguments);};}();


/**
                                                                                                                                                                        * Determines if a node exists.
                                                                                                                                                                        * @param {string} id The id of the node to get.
                                                                                                                                                                        * @export
                                                                                                                                                                        */var has = function () {var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(
  function _callee3(collection, id) {return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:
            log('GET', id);return _context3.abrupt('return',
            data.has(id));case 2:case 'end':return _context3.stop();}}}, _callee3, this);}));return function has(_x6, _x7) {return _ref3.apply(this, arguments);};}();


/**
                                                                                                                                                                        * Deletes a node.
                                                                                                                                                                        * @param {string} id The id of the node to delete.
                                                                                                                                                                        * @export
                                                                                                                                                                        */var del = function () {var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(
  function _callee4(collection, id) {return regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:
            log('DEL', id);return _context4.abrupt('return',

            collection.
            deleteOneAsync({ id: id }).
            then(function () {return data.delete(id);}));case 2:case 'end':return _context4.stop();}}}, _callee4, this);}));return function del(_x8, _x9) {return _ref4.apply(this, arguments);};}();


/**
                                                                                                                                                                                                       * Creates a new "Mongo-Memory"  store.
                                                                                                                                                                                                       * @returns {Promise} Resolves once the new store has been created/initialized.
                                                                                                                                                                                                       * @export
                                                                                                                                                                                                       */var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);var _debug = require('debug');var _debug2 = _interopRequireDefault(_debug);var _mongodb = require('mongodb');var _constants = require('./constants');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new _bluebird2.default(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return (0, _bluebird.resolve)(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};} /**
andles node CRUD operations.
since 4/9/18
file
var log = (0, _debug2.default)('node-factory:store');var MongoConnect = (0, _bluebird.promisify)(_mongodb.MongoClient.connect, { context: _mongodb.MongoClient }); /**
tores a in-memory copy of the node data.
his will significantly reduce database calls and reduce node fetch time.
type {Map}
var data = exports.data = new Map();exports.default = function () {var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref6$db = _ref6.db,db = _ref6$db === undefined ? _constants.DEFAULT_DB_NAME : _ref6$db,_ref6$url = _ref6.url,url = _ref6$url === undefined ? _constants.DEFAULT_DB_URL : _ref6$url,_ref6$collection = _ref6.collection,collection = _ref6$collection === undefined ? _constants.DEFAULT_DB_COLLECTION : _ref6$collection;var client, databaseCollection, cursor, fields, methods;return regeneratorRuntime.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:log('Initializing Store...'); // Create the necessary Mongo connection
            _context5.next = 3;return MongoConnect(url);case 3:client = _context5.sent;
            databaseCollection = (0, _bluebird.promisifyAll)(client.db(db).collection(collection));

            // Prime the in-memory store
            _context5.next = 7;return databaseCollection.findAsync();case 7:cursor = _context5.sent;_context5.next = 10;return (
              cursor.toArray());case 10:fields = _context5.sent;
            _lodash2.default.each(fields, function (field) {return data.set(field.id, _lodash2.default.omit(field, ['_id']));});

            // Create partials from each method
            // with the selected collection.
            methods = {
              has: has,
              get: get,
              set: set,
              del: del };return _context5.abrupt('return',


            Object.assign({ client: client, data: data },
            _lodash2.default.mapValues(methods, function (method) {return _lodash2.default.partial(method, databaseCollection);})));case 14:case 'end':return _context5.stop();}}}, _callee5, this);}));function createStore() {return _ref5.apply(this, arguments);}return createStore;}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Nb25nb01lbW9yeVN0b3JlLmpzIl0sIm5hbWVzIjpbImNvbGxlY3Rpb24iLCJpZCIsIm5vZGUiLCJsb2ciLCJ1cGRhdGVBc3luYyIsIiRzZXQiLCJ1cHNlcnQiLCJ0aGVuIiwiZGF0YSIsInNldCIsImdldCIsImhhcyIsImRlbGV0ZU9uZUFzeW5jIiwiZGVsZXRlIiwiZGVsIiwiTW9uZ29Db25uZWN0IiwiY29ubmVjdCIsImNvbnRleHQiLCJNYXAiLCJkYiIsInVybCIsImNsaWVudCIsImRhdGFiYXNlQ29sbGVjdGlvbiIsImZpbmRBc3luYyIsImN1cnNvciIsInRvQXJyYXkiLCJmaWVsZHMiLCJlYWNoIiwiZmllbGQiLCJvbWl0IiwibWV0aG9kcyIsIk9iamVjdCIsImFzc2lnbiIsIm1hcFZhbHVlcyIsInBhcnRpYWwiLCJtZXRob2QiLCJjcmVhdGVTdG9yZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQkE7Ozs7OztBQU1BLG1CQUFtQkEsVUFBbkIsRUFBK0JDLEVBQS9CLEVBQW1DQyxJQUFuQztBQUNFQyxnQkFBSSxLQUFKLEVBQVdELElBQVgsRUFERjs7QUFHU0Y7QUFDSkksdUJBREksQ0FDUSxFQUFFSCxNQUFGLEVBRFIsRUFDZ0IsRUFBRUksTUFBTUgsSUFBUixFQURoQixFQUNnQyxFQUFFSSxRQUFRLElBQVYsRUFEaEM7QUFFSkMsZ0JBRkksQ0FFQyxvQkFBTUMsS0FBS0MsR0FBTCxDQUFTUixFQUFULEVBQWFDLElBQWIsQ0FBTixFQUZELENBSFQsZ0UsbUJBQWVPLEc7OztBQVFmOzs7OztBQUtBLG9CQUFtQlQsVUFBbkIsRUFBK0JDLEVBQS9CO0FBQ0VFLGdCQUFJLEtBQUosRUFBV0YsRUFBWCxFQURGO0FBRVNPLGlCQUFLRSxHQUFMLENBQVNULEVBQVQsQ0FGVCxrRSxtQkFBZVMsRzs7O0FBS2Y7Ozs7O0FBS0Esb0JBQW1CVixVQUFuQixFQUErQkMsRUFBL0I7QUFDRUUsZ0JBQUksS0FBSixFQUFXRixFQUFYLEVBREY7QUFFU08saUJBQUtHLEdBQUwsQ0FBU1YsRUFBVCxDQUZULGtFLG1CQUFlVSxHOzs7QUFLZjs7Ozs7QUFLQSxvQkFBbUJYLFVBQW5CLEVBQStCQyxFQUEvQjtBQUNFRSxnQkFBSSxLQUFKLEVBQVdGLEVBQVgsRUFERjs7QUFHU0Q7QUFDSlksMEJBREksQ0FDVyxFQUFFWCxNQUFGLEVBRFg7QUFFSk0sZ0JBRkksQ0FFQyxvQkFBTUMsS0FBS0ssTUFBTCxDQUFZWixFQUFaLENBQU4sRUFGRCxDQUhULGtFLG1CQUFlYSxHOzs7QUFRZjs7Ozt5TUFuRUEsZ0MsK0NBQ0EsOEIsNkNBQ0Esa0NBRUEsd0MsaWlCQVZBOzs7O2k5QkFnQkEsSUFBTVgsTUFBTSxxQkFBTSxvQkFBTixDQUFaLENBQ0EsSUFBTVksZUFBZSx5QkFBa0IscUJBQVlDLE9BQTlCLEVBQXVDLEVBQUVDLDZCQUFGLEVBQXZDLENBQXJCLEMsQ0FFQTs7Ozt1bkNBS08sSUFBTVQsc0JBQU8sSUFBSVUsR0FBSixFQUFiLEMsbUdBc0RRLHFHQUlYLEVBSlcsa0JBQ2JDLEVBRGEsQ0FDYkEsRUFEYSxvRkFFYkMsR0FGYSxDQUViQSxHQUZhLDRGQUdicEIsVUFIYSxDQUdiQSxVQUhhLDBRQUtiRyxJQUFJLHVCQUFKLEVBTGEsQ0FPYjtBQVBhLHNDQVFRWSxhQUFhSyxHQUFiLENBUlIsUUFRUEMsTUFSTztBQVNQQyw4QkFUTyxHQVNjLDRCQUFxQkQsT0FBT0YsRUFBUCxDQUFVQSxFQUFWLEVBQWNuQixVQUFkLENBQXlCQSxVQUF6QixDQUFyQixDQVRkOztBQVdiO0FBWGEsc0NBWVFzQixtQkFBbUJDLFNBQW5CLEVBWlIsUUFZUEMsTUFaTztBQWFRQSxxQkFBT0MsT0FBUCxFQWJSLFVBYVBDLE1BYk87QUFjYiw2QkFBRUMsSUFBRixDQUFPRCxNQUFQLEVBQWUseUJBQVNsQixLQUFLQyxHQUFMLENBQVNtQixNQUFNM0IsRUFBZixFQUFtQixpQkFBRTRCLElBQUYsQ0FBT0QsS0FBUCxFQUFjLENBQUMsS0FBRCxDQUFkLENBQW5CLENBQVQsRUFBZjs7QUFFQTtBQUNBO0FBQ01FLG1CQWxCTyxHQWtCRztBQUNkbkIsc0JBRGM7QUFFZEQsc0JBRmM7QUFHZEQsc0JBSGM7QUFJZEssc0JBSmMsRUFsQkg7OztBQXlCTmlCLG1CQUFPQyxNQUFQLENBQWMsRUFBRVgsY0FBRixFQUFVYixVQUFWLEVBQWQ7QUFDTCw2QkFBRXlCLFNBQUYsQ0FBWUgsT0FBWixFQUFxQiwwQkFBVSxpQkFBRUksT0FBRixDQUFVQyxNQUFWLEVBQWtCYixrQkFBbEIsQ0FBVixFQUFyQixDQURLLENBekJNLG1FLFlBQWVjLFcsZ0RBQUFBLFciLCJmaWxlIjoiTW9uZ29NZW1vcnlTdG9yZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGFuZGxlcyBub2RlIENSVUQgb3BlcmF0aW9ucy5cbiAqIEBzaW5jZSA0LzkvMThcbiAqIEBmaWxlXG4gKi9cblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBNb25nb0NsaWVudCB9IGZyb20gJ21vbmdvZGInO1xuXG5pbXBvcnQge1xuICBERUZBVUxUX0RCX1VSTCxcbiAgREVGQVVMVF9EQl9OQU1FLFxuICBERUZBVUxUX0RCX0NPTExFQ1RJT04sXG59IGZyb20gJy4vY29uc3RhbnRzJztcblxuY29uc3QgbG9nID0gZGVidWcoJ25vZGUtZmFjdG9yeTpzdG9yZScpO1xuY29uc3QgTW9uZ29Db25uZWN0ID0gUHJvbWlzZS5wcm9taXNpZnkoTW9uZ29DbGllbnQuY29ubmVjdCwgeyBjb250ZXh0OiBNb25nb0NsaWVudCB9KTtcblxuLyoqXG4gKiBTdG9yZXMgYSBpbi1tZW1vcnkgY29weSBvZiB0aGUgbm9kZSBkYXRhLlxuICogVGhpcyB3aWxsIHNpZ25pZmljYW50bHkgcmVkdWNlIGRhdGFiYXNlIGNhbGxzIGFuZCByZWR1Y2Ugbm9kZSBmZXRjaCB0aW1lLlxuICogQHR5cGUge01hcH1cbiAqL1xuZXhwb3J0IGNvbnN0IGRhdGEgPSBuZXcgTWFwKCk7XG5cbi8qKlxuICogU2V0cyBhIG5ldyBub2RlIGluIG1lbW9yeSBmb3IgcXVpY2sgcmV0cmlldmFsIGFuZCBwZXJzaXN0cyBpdCB0byB0aGUgZGF0YWJhc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIG5vZGUncyBpZC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBub2RlIFRoZSBub2RlIGRhdGEgdG8gc2V0IGluIHRoZSBzdG9yZS5cbiAqIEBleHBvcnRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gc2V0KGNvbGxlY3Rpb24sIGlkLCBub2RlKSB7XG4gIGxvZygnU0VUJywgbm9kZSk7XG5cbiAgcmV0dXJuIGNvbGxlY3Rpb25cbiAgICAudXBkYXRlQXN5bmMoeyBpZCB9LCB7ICRzZXQ6IG5vZGUgfSwgeyB1cHNlcnQ6IHRydWUgfSlcbiAgICAudGhlbigoKSA9PiBkYXRhLnNldChpZCwgbm9kZSkpO1xufVxuXG4vKipcbiAqIEZldGNoZXMgYSBub2RlIGJ5IGlkLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgbm9kZSB0byBnZXQuXG4gKiBAZXhwb3J0XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldChjb2xsZWN0aW9uLCBpZCkge1xuICBsb2coJ0dFVCcsIGlkKTtcbiAgcmV0dXJuIGRhdGEuZ2V0KGlkKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgbm9kZSBleGlzdHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGlkIG9mIHRoZSBub2RlIHRvIGdldC5cbiAqIEBleHBvcnRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gaGFzKGNvbGxlY3Rpb24sIGlkKSB7XG4gIGxvZygnR0VUJywgaWQpO1xuICByZXR1cm4gZGF0YS5oYXMoaWQpO1xufVxuXG4vKipcbiAqIERlbGV0ZXMgYSBub2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgbm9kZSB0byBkZWxldGUuXG4gKiBAZXhwb3J0XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGRlbChjb2xsZWN0aW9uLCBpZCkge1xuICBsb2coJ0RFTCcsIGlkKTtcblxuICByZXR1cm4gY29sbGVjdGlvblxuICAgIC5kZWxldGVPbmVBc3luYyh7IGlkIH0pXG4gICAgLnRoZW4oKCkgPT4gZGF0YS5kZWxldGUoaWQpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFwiTW9uZ28tTWVtb3J5XCIgIHN0b3JlLlxuICogQHJldHVybnMge1Byb21pc2V9IFJlc29sdmVzIG9uY2UgdGhlIG5ldyBzdG9yZSBoYXMgYmVlbiBjcmVhdGVkL2luaXRpYWxpemVkLlxuICogQGV4cG9ydFxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBjcmVhdGVTdG9yZSh7XG4gIGRiID0gREVGQVVMVF9EQl9OQU1FLFxuICB1cmwgPSBERUZBVUxUX0RCX1VSTCxcbiAgY29sbGVjdGlvbiA9IERFRkFVTFRfREJfQ09MTEVDVElPTixcbn0gPSB7fSkge1xuICBsb2coJ0luaXRpYWxpemluZyBTdG9yZS4uLicpO1xuXG4gIC8vIENyZWF0ZSB0aGUgbmVjZXNzYXJ5IE1vbmdvIGNvbm5lY3Rpb25cbiAgY29uc3QgY2xpZW50ID0gYXdhaXQgTW9uZ29Db25uZWN0KHVybCk7XG4gIGNvbnN0IGRhdGFiYXNlQ29sbGVjdGlvbiA9IFByb21pc2UucHJvbWlzaWZ5QWxsKGNsaWVudC5kYihkYikuY29sbGVjdGlvbihjb2xsZWN0aW9uKSk7XG5cbiAgLy8gUHJpbWUgdGhlIGluLW1lbW9yeSBzdG9yZVxuICBjb25zdCBjdXJzb3IgPSBhd2FpdCBkYXRhYmFzZUNvbGxlY3Rpb24uZmluZEFzeW5jKCk7XG4gIGNvbnN0IGZpZWxkcyA9IGF3YWl0IGN1cnNvci50b0FycmF5KCk7XG4gIF8uZWFjaChmaWVsZHMsIGZpZWxkID0+IGRhdGEuc2V0KGZpZWxkLmlkLCBfLm9taXQoZmllbGQsIFsnX2lkJ10pKSk7XG5cbiAgLy8gQ3JlYXRlIHBhcnRpYWxzIGZyb20gZWFjaCBtZXRob2RcbiAgLy8gd2l0aCB0aGUgc2VsZWN0ZWQgY29sbGVjdGlvbi5cbiAgY29uc3QgbWV0aG9kcyA9IHtcbiAgICBoYXMsXG4gICAgZ2V0LFxuICAgIHNldCxcbiAgICBkZWwsXG4gIH07XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBjbGllbnQsIGRhdGEgfSxcbiAgICBfLm1hcFZhbHVlcyhtZXRob2RzLCBtZXRob2QgPT4gXy5wYXJ0aWFsKG1ldGhvZCwgZGF0YWJhc2VDb2xsZWN0aW9uKSksXG4gICk7XG59XG4iXX0=