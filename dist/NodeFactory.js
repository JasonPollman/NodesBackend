'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.get = exports.del = exports.set = undefined;var _bluebird = require('bluebird');var _bluebird2 = _interopRequireDefault(_bluebird);






































/**
                                                                                                                                                                                                                        * Sets a new node.
                                                                                                                                                                                                                        * @param {object} factoryOptions Options used to create this operations instance.
                                                                                                                                                                                                                        * @param {object} data The node data to store in the database.
                                                                                                                                                                                                                        * @returns {Promise} Resolves once the node has been created.
                                                                                                                                                                                                                        * @export
                                                                                                                                                                                                                        */var set = exports.set = function () {var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(
  function _callee(_ref2) {var store = _ref2.store;var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] :




    {},_ref4$id = _ref4.id,id = _ref4$id === undefined ? (0, _v2.default)() : _ref4$id,type = _ref4.type,value = _ref4.value,_ref4$parent = _ref4.parent,parent = _ref4$parent === undefined ? null : _ref4$parent;var node, hasParentNode, isExistingNode, shouldUpsertNode;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
            node = validateNode({
              id: id,
              type: type,
              value: value,
              parent: parent });


            // Validate that the parent node exists (if not attaching to the root node).
            // If the parent node doesn't exist, we cannot upsert.
            // Use id: constants.ROOT_NODE_ID for the root node.
            _context.t0 = parent === _constants.ROOT_NODE_ID;if (_context.t0) {_context.next = 6;break;}_context.next = 5;return store.has(node.parent);case 5:_context.t0 = _context.sent;case 6:hasParentNode = _context.t0;if (
            hasParentNode) {_context.next = 9;break;}throw new Error("Cannot upsert node, since its parent node doesn't exist.");case 9:_context.next = 11;return (






              store.get(id));case 11:isExistingNode = _context.sent;
            shouldUpsertNode = isExistingNode ? !_lodash2.default.isEqual(isExistingNode, node) : true;if (!

            shouldUpsertNode) {_context.next = 18;break;}_context.next = 16;return (
              store.set(id, node));case 16:
            log('Upserted node with id', id);return _context.abrupt('return',

            {
              node: node,
              broadcast: true });case 18:



            log('No changes to node with id ' + id + ', soft aborting upsert.');return _context.abrupt('return',

            {
              node: node,
              broadcast: false });case 20:case 'end':return _context.stop();}}}, _callee, this);}));return function set(_x2) {return _ref3.apply(this, arguments);};}();



/**
                                                                                                                                                                          * Deletes a new node.
                                                                                                                                                                          * This will soft fail if the node to delete doesn't exist.
                                                                                                                                                                          * @param {object} factoryOptions Options used to create this operations instance.
                                                                                                                                                                          * @param {object} data The node data to use to delete the node, `id` is required.
                                                                                                                                                                          * @returns {Promise} Resolves once the node has been deleted.
                                                                                                                                                                          * @export
                                                                                                                                                                          */var del = exports.del = function () {var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(
  function _callee2(_ref5) {var store = _ref5.store;var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},id = _ref7.id;var node;return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.next = 2;return (
              store.get(id));case 2:node = _context2.sent;if (!

            node) {_context2.next = 7;break;}_context2.next = 6;return (
              store.del(node.id));case 6:
            log('Deleted node with id', id);case 7:return _context2.abrupt('return',


            {
              node: node,
              broadcast: Boolean(node) });case 8:case 'end':return _context2.stop();}}}, _callee2, this);}));return function del(_x4) {return _ref6.apply(this, arguments);};}();



/**
                                                                                                                                                                                   * Gets a node by id.
                                                                                                                                                                                   * Deliberately made this method async, so it's the same as the rest (since it simply uses a map).
                                                                                                                                                                                   * @param {object} factoryOptions Options used to create this operations instance.
                                                                                                                                                                                   * @param {object} data The node data to use to fetch the node, `id` is required.
                                                                                                                                                                                   * @returns {Promise} Resolves with the node with the given id, or null if it doesn't exist.
                                                                                                                                                                                   * @export
                                                                                                                                                                                   */var get = exports.get = function () {var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(
  function _callee3(_ref8) {var store = _ref8.store;var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},id = _ref10.id;var node;return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_context3.next = 2;return (
              store.get(id));case 2:_context3.t0 = _context3.sent;if (_context3.t0) {_context3.next = 5;break;}_context3.t0 = null;case 5:node = _context3.t0;
            log('Fetched node:', node);return _context3.abrupt('return',

            {
              node: node,
              broadcast: false });case 8:case 'end':return _context3.stop();}}}, _callee3, this);}));return function get(_x6) {return _ref9.apply(this, arguments);};}();



/**
                                                                                                                                                                           * Exports all nodes.
                                                                                                                                                                           * @param {object} factoryOptions Options used to create this operations instance.
                                                                                                                                                                           */exports.
all = all;exports.default =








NodeFactory;var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);var _debug = require('debug');var _debug2 = _interopRequireDefault(_debug);var _v = require('uuid/v4');var _v2 = _interopRequireDefault(_v);var _assert = require('assert');var _assert2 = _interopRequireDefault(_assert);var _constants = require('./constants');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new _bluebird2.default(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return (0, _bluebird.resolve)(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};} /**
reates instances of "node operations".
hese are agnostic of the provided store, but utliitze the store
via dependency injection. The default export provides partials bound
to the provided store itself.
since 4/9/18
file
var log = (0, _debug2.default)('node-factory:operations'); /**
he fields from a node we actually care about.
ny other junk passed through the socket will be ignored.
type {Array<string>}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              */var NODE_VALID_FIELDS = _lodash2.default.keys(_constants.NODE_SCHEMA); /**
alidates a node by checking the required properties, per NODE_SCHEMA, and also
omits any extraneous node properties send over the socket we don't care about.
param {*} node The node to validate.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        */function validateNode(node) {var truncatedNode = _lodash2.default.pick(node, NODE_VALID_FIELDS);_lodash2.default.each(_constants.NODE_SCHEMA, function (_ref, key) {var check = _ref.check,message = _ref.message;return (0, _assert2.default)(check(node[key], node), message);});return truncatedNode;}function all(_ref11) {var store = _ref11.store;return store.data;} /**
reates a new "node operations" instance, given factory options.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * @param {object} factoryOptions Options used to create this operations instance.
returns {object} Each of the get, set, and del node operations bound to "factoryOptions".
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       */function NodeFactory(factoryOptions) {var operations = { get: get, set: set, del: del, all: all };return _lodash2.default.mapValues(operations, function (action) {return _lodash2.default.partial(action, factoryOptions);});}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,