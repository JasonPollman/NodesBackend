'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _bluebird = require('bluebird');exports.





























handleNodeEventError = handleNodeEventError;exports.











broadcastChildEvent = broadcastChildEvent;exports.

























prepareNodeOperation = prepareNodeOperation;exports.default =






















setupWebsocketEvents;var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);var _util = require('util');var _util2 = _interopRequireDefault(_util);var _debug = require('debug');var _debug2 = _interopRequireDefault(_debug);var _constants = require('./constants');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;} /**
xports a function that takes in a NodeFactory instance and returns a method that
can be passed to the websockets manager's `onSocketConnection` callback.
his binds all the socket events to the given NodeFactory instance.
since 4/9/18
file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       */var log = (0, _debug2.default)('node-factory:events'); // eslint-disable-next-line no-console
var inspect = function inspect(value) {return console.log(_util2.default.inspect(value, { colors: true, depth: 10 }));}; /**
                                                                                                                          * Dispatches the error event when any incoming message fails to process.
                                                                                                                          * This event can be hooked into to "toast" error messages on the front-end.
                                                                                                                          * @param {object} socket The socket connection handler in which the error occurred.
                                                                                                                          * @param {string} event The name of the event that failed to process.
                                                                                                                          * @param {Error} error The error that was thrown by the incoming message handler.
                                                                                                                          * @export
                                                                                                                          */function handleNodeEventError(socket, event, error) {log('Socket Handler Error "' + event + '":', error);socket.emit(_constants.SOCKET_EVENTS.ERROR, { event: event, error: error.message });} /**
                                                                                                                                                                                                                                                                                                                            * Broadcasts the message from the user to the rest of the connected clients.
                                                                                                                                                                                                                                                                                                                            * This excludes the client who was the original sender (per socket.io docs).
                                                                                                                                                                                                                                                                                                                            * @param {object} socket The socket connection handler associated with the callback.
                                                                                                                                                                                                                                                                                                                            * @param {string} event The name of the event that callback will be bound to.
                                                                                                                                                                                                                                                                                                                            * @param {object} node The data to emit.
                                                                                                                                                                                                                                                                                                                            */function broadcastChildEvent(socket, event, node) {var key = 'child-of-' + node.parent + '-' + event;log('Broadcasting Socket Event "' + key + '":');socket.broadcast.emit(key, node);log('Broadcasting Socket Event "' + event + '":', node);socket.broadcast.emit(event, node);} /**
repares an incoming socket event handler by wrapping the event handler to call the respective
node operation, broadcast the event to all connected users, and and emit
the SOCKET_EVENTS.ERROR event if the handler throws.

t also limits the interface of each partialized node operation
to receive only a single object (by design).
param {object} socket The socket connection handler associated with the handler.
param {object} eventSchema Options for this given event.
param {function} eventSchema.handler The event handler that will be invoked on "event".
param {boolean} eventSchema.broadcast If true, the event will be
broadcast to all other connected clients.
param {string} event The name of the event that handler will be bound to.
returns {function} The wrapped socket event handler.
export
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  */function prepareNodeOperation(socket, handler, event) {return function (data) {log('Incoming Socket Event "' + event + '":', data);var maybeBroadcastChildEvent = function maybeBroadcastChildEvent(_ref) {var node = _ref.node,broadcast = _ref.broadcast;return broadcast ? broadcastChildEvent(socket, event, node) : _lodash2.default.noop;};return (0, _bluebird.resolve)().then(function () {return handler(data);}).then(maybeBroadcastChildEvent).catch(function (e) {return handleNodeEventError(socket, event, e);});};} /**
eturns a function that can be passed to the websocket's `onSocketConnection`
callback, provided a NodeFactory instance. This will setup the necessary socket
event handlers for each of the corresponding node factory CRUD methods.
param {object} nodes The NodeFactory to operate against and to bind to the socket connection.
returns {function} A callback for websockets.onSocketConnection.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        * @export
function setupWebsocketEvents(nodes) {return function (websocket, socket) {var _eventSchema; // Convenience to dump the store's data
    // for debugging purposes.
    if (_constants.NODE_ENV !== 'production') socket.on('dump', function () {return inspect(nodes.all());});var eventSchema = (_eventSchema = {}, _defineProperty(_eventSchema, _constants.SOCKET_EVENTS.HAS_NODE, nodes.has), _defineProperty(_eventSchema, _constants.SOCKET_EVENTS.GET_NODE, nodes.get), _defineProperty(_eventSchema, _constants.SOCKET_EVENTS.SET_NODE, nodes.set), _defineProperty(_eventSchema, _constants.SOCKET_EVENTS.DEL_NODE, nodes.del), _eventSchema);_lodash2.default.each(eventSchema, function (schema, event) {socket.on(event, prepareNodeOperation(socket, schema, event));});};}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,